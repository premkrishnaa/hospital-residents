
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INT ID PARTITION_A PREFERENCE_LISTS_A PARTITION_B PREFERENCE_LISTS_B ENDgraph : nodes nodes edges edgesnodes : PARTITION_A pvertex_list ';' ENDnodes : PARTITION_B pvertex_list ';' ENDpvertex_list : pvertex_list ',' pvertexpvertex_list : pvertexpvertex : IDpvertex : ID '(' INT ')'pvertex : ID '(' INT ',' INT ')'vertex_list : vertex_list ',' IDvertex_list : IDedges : PREFERENCE_LISTS_A preference_lists ENDedges : PREFERENCE_LISTS_B preference_lists ENDpreference_lists : preference_lists pref_listpreference_lists : pref_listpref_list : ID ':' vertex_list ';'"
    
_lr_action_items = {'INT':([12,26,],[19,32,]),',':([5,6,7,9,17,19,27,33,34,35,38,],[10,-6,-5,10,-4,26,-7,-10,37,-8,-9,]),'$end':([1,23,28,31,],[0,-1,-11,-12,]),':':([22,],[30,]),';':([5,6,7,9,17,27,33,34,35,38,],[11,-6,-5,16,-4,-7,-10,36,-8,-9,]),'PREFERENCE_LISTS_B':([8,14,18,25,28,31,],[15,15,-3,-2,-11,-12,]),'PARTITION_B':([0,3,18,25,],[2,2,-3,-2,]),'(':([6,],[12,]),'END':([11,16,20,21,24,29,36,],[18,25,28,-14,31,-13,-15,]),')':([19,32,],[27,35,]),'PREFERENCE_LISTS_A':([8,14,18,25,28,31,],[13,13,-3,-2,-11,-12,]),'ID':([2,4,10,13,15,20,21,24,29,30,36,37,],[6,6,6,22,22,22,-14,22,-13,33,-15,38,]),'PARTITION_A':([0,3,18,25,],[4,4,-3,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'graph':([0,],[1,]),'pref_list':([13,15,20,24,],[21,21,29,29,]),'preference_lists':([13,15,],[20,24,]),'nodes':([0,3,],[3,8,]),'edges':([8,14,],[14,23,]),'pvertex_list':([2,4,],[5,9,]),'vertex_list':([30,],[34,]),'pvertex':([2,4,10,],[7,7,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> graph","S'",1,None,None,None),
  ('graph -> nodes nodes edges edges','graph',4,'p_graph','graph_parser.py',10),
  ('nodes -> PARTITION_A pvertex_list ; END','nodes',4,'p_partition_A','graph_parser.py',15),
  ('nodes -> PARTITION_B pvertex_list ; END','nodes',4,'p_partition_B','graph_parser.py',20),
  ('pvertex_list -> pvertex_list , pvertex','pvertex_list',3,'p_pvertex_list','graph_parser.py',26),
  ('pvertex_list -> pvertex','pvertex_list',1,'p_pvertex_list_terminating','graph_parser.py',31),
  ('pvertex -> ID','pvertex',1,'p_pvertex_one','graph_parser.py',37),
  ('pvertex -> ID ( INT )','pvertex',4,'p_pvertex_capacity_upper','graph_parser.py',42),
  ('pvertex -> ID ( INT , INT )','pvertex',6,'p_pvertex_capacity_upper_and_lower','graph_parser.py',47),
  ('vertex_list -> vertex_list , ID','vertex_list',3,'p_vertex_list','graph_parser.py',52),
  ('vertex_list -> ID','vertex_list',1,'p_vertex_list_terminating','graph_parser.py',57),
  ('edges -> PREFERENCE_LISTS_A preference_lists END','edges',3,'p_preference_lists_A','graph_parser.py',62),
  ('edges -> PREFERENCE_LISTS_B preference_lists END','edges',3,'p_preference_lists_B','graph_parser.py',67),
  ('preference_lists -> preference_lists pref_list','preference_lists',2,'p_preference_lists','graph_parser.py',72),
  ('preference_lists -> pref_list','preference_lists',1,'p_preference_lists_terminating','graph_parser.py',77),
  ('pref_list -> ID : vertex_list ;','pref_list',4,'p_pref_list','graph_parser.py',82),
]
